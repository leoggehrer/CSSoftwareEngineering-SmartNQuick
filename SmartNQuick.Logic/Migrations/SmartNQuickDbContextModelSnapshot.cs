// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartNQuick.Logic.DataContext;

#nullable disable

namespace SmartNQuick.Logic.Migrations
{
    [DbContext(typeof(SmartNQuickDbContext))]
    partial class SmartNQuickDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.Another", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Another", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Detail", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.EditForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte?>("ByteNullable")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ByteValue")
                        .HasColumnType("tinyint");

                    b.Property<bool>("CheckBox")
                        .HasColumnType("bit");

                    b.Property<bool?>("CheckBoxNullable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateNullable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeNullable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DoubleNullable")
                        .HasColumnType("float");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("float");

                    b.Property<int>("EnumState")
                        .HasColumnType("int");

                    b.Property<int?>("IntegerNullable")
                        .HasColumnType("int");

                    b.Property<int>("IntegerValue")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short?>("ShortNullable")
                        .HasColumnType("smallint");

                    b.Property<short>("ShortValue")
                        .HasColumnType("smallint");

                    b.Property<string>("TextArea")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TextAreaReadonly")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TextBox")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextBoxRequired")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan?>("TimeSpanNullable")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeSpanValue")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("EditForm", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Master", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.One", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("One", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.OneXAnother", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnotherId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OneId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AnotherId");

                    b.HasIndex("OneId");

                    b.ToTable("OneXAnother", "Test");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.UnitTest.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre", "UnitTest");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.Detail", b =>
                {
                    b.HasOne("SmartNQuick.Logic.Entities.Persistence.Test.Master", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.OneXAnother", b =>
                {
                    b.HasOne("SmartNQuick.Logic.Entities.Persistence.Test.Another", "Another")
                        .WithMany("OneXAnothers")
                        .HasForeignKey("AnotherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartNQuick.Logic.Entities.Persistence.Test.One", "One")
                        .WithMany("OneXAnothers")
                        .HasForeignKey("OneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Another");

                    b.Navigation("One");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.Another", b =>
                {
                    b.Navigation("OneXAnothers");
                });

            modelBuilder.Entity("SmartNQuick.Logic.Entities.Persistence.Test.One", b =>
                {
                    b.Navigation("OneXAnothers");
                });
#pragma warning restore 612, 618
        }
    }
}
